{"version":3,"sources":["../src/Vee/Elements/Containers/OrderLayout/OrderLayout.ts"],"names":[],"mappings":";;;IAGA,iBAAiC,SAAQ,6BAAa;QAKlD,YAAY,MAAmB;YAC3B,KAAK,CAAC,MAAM,CAAC,CAAC;YACd,cAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,mBAAmB,CAAC,CAAC;YACjD,wDAAwD;YACxD,IAAI,CAAC,sBAAsB,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACzD,CAAC;QAED,IAAW,OAAO,CAAC,KAAY;YAC3B,IAAI,CAAC,qBAAqB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QACjD,CAAC;QACD,IAAW,OAAO;YACd,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC;QACjD,CAAC;QAED,IAAW,WAAW,CAAC,KAAc;YACjC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;YAE1B,EAAE,CAAA,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;gBACnB,cAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;YACjD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,cAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;YACpD,CAAC;QACL,CAAC;QACD,IAAW,WAAW;YAClB,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;QAC7B,CAAC;QAEM,gBAAgB;YACnB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC/C,CAAC;QACM,gBAAgB;YACnB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC/C,CAAC;QACM,aAAa;YAChB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC/C,CAAC;KACJ;IAzCD,8BAyCC","file":"OrderLayout.js","sourcesContent":["import { BaseContainer } from \"Vee/Elements/Core/BaseContainer/BaseContainer\";\r\nimport Core from \"Vee/Elements/Core/Core\";\r\n\r\nexport default class OrderLayout extends BaseContainer {\r\n    private _content: HTMLElement;\r\n\r\n    private _rightToLeft: boolean;\r\n    \r\n    constructor(parent: HTMLElement) {\r\n        super(parent);\r\n        Core.addClass(this.element, \"UEye-Order-Layout\");\r\n        // this._content = UEyeCore.create(\"div\", this.element);\r\n        this.linkComponentContainer(\"content\", this.element);\r\n    }\r\n\r\n    public set content(value: any[]) {\r\n        this.setComponentContainer(\"content\", value);\r\n    }\r\n    public get content(): any[] {\r\n        return this.getComponentContainer(\"content\");\r\n    }\r\n\r\n    public set rightToLeft(value: boolean) {\r\n        this._rightToLeft = value;\r\n\r\n        if(this._rightToLeft) {\r\n            Core.addClass(this.element, \"Right-To-Left\");\r\n        } else {\r\n            Core.removeClass(this.element, \"Right-To-Left\");\r\n        }\r\n    }\r\n    public get rightToLeft(): boolean {\r\n        return this._rightToLeft;\r\n    }\r\n    \r\n    public onModifiedChange(): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    public onReadonlyChange(): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    public onErrorChange(): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}"]}